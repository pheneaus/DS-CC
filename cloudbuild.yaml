# Replace 'pheneaus-bucket' with your actual bucket name
logsBucket: gs://pheneaus-bucket

steps:
  # Step 1: Build the frontend image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/aman-project-426023/frontend-image:latest', '.']
    dir: 'frontend'  # Ensure this points to the correct directory

  # Step 2: Push the frontend image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/aman-project-426023/frontend-image:latest']

  # Step 3: Build the backend image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/aman-project-426023/backend-image:latest', '.']
    dir: 'backend'  # Ensure this points to the correct directory

  # Step 4: Push the backend image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/aman-project-426023/backend-image:latest']

  # Step 5: Deploy backend to Kubernetes
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'deployment.yaml']
    dir: 'backend'  # Ensure this points to the correct directory
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=$_COMPUTE_ZONE'
      - 'CLOUDSDK_CONTAINER_CLUSTER=$_CLUSTER_NAME'

  # Step 6: Deploy frontend to Kubernetes
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'deployment.yaml']
    dir: 'frontend'  # Ensure this points to the correct directory
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=$_COMPUTE_ZONE'
      - 'CLOUDSDK_CONTAINER_CLUSTER=$_CLUSTER_NAME'

  # Step 7: Expose the backend service (if not exists)
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo '
        apiVersion: v1
        kind: Service
        metadata:
          name: backend-service
          labels:
            app: backend
        spec:
          type: LoadBalancer
          selector:
            app: backend-image-deployment
          ports:
          - port: 5000
            targetPort: 5000
        ' | kubectl apply -f -
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=aman'

  # Step 8: Expose the frontend service (if not exists)
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo '
        apiVersion: v1
        kind: Service
        metadata:
          name: frontend-service
          labels:
            app: frontend
        spec:
          type: LoadBalancer
          selector:
            app: frontend-image-deployment
          ports:
          - port: 80
            targetPort: 80
        ' | kubectl apply -f -
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=aman'
